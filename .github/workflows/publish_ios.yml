name: Publish (iOS)

on:
  # Allow manual builds of this workflow
  workflow_dispatch: {}
  # Run the workflow whenever a new tag named 'v*' is pushed
  push:
    branches:
      - "!*"
    tags:
      - "v*"

jobs:
  build_and_publish:
    runs-on: macos-latest

    env:
      # Point the `ruby/setup-ruby` action at this Gemfile, so it
      # caches dependencies for us.
      BUNDLE_GEMFILE: ${{ github.workspace }}/ios/Gemfile
      # Use the same ssh-agent socket value across all jobs
      # Useful when a GH action is using SSH behind-the-scenes
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock

    steps:
      - name: Check out from git
        uses: actions/checkout@v3

      - name: Create .dev.env file
        run: |
          cat > assets/.dev.env <<EOF
          BASE_URL=https://moxy.herokuapp.com
          EOF

      - name: Create .prod.env file
        run: |
          cat > assets/.prod.env <<EOF
          BASE_URL=https://moxy.herokuapp.com
          EOF
      # This retrieves the current date & week in a format that we can use for keying our
      # cache on to help us pick the most recent cached data
      - name: Fetch date for cache key
        id: get-date
        run: |
          echo "week=$(/bin/date -u "+%U")" >> $GITHUB_OUTPUT
          echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
          echo "hour=$(/bin/date -u "+%H")" >> $GITHUB_OUTPUT
          echo "minute=$(/bin/date -u "+%M")" >> $GITHUB_OUTPUT
        shell: bash
      # Attempt to fetch the DerivedData from cache, by preferring one from earlier this minute, then one earlier
      # this hour, then one earlier today, finally one earlier this week, and at last, any time.
      - uses: actions/cache@v3
        name: DerivedData cache
        with:
          path: .deriveddata-cache
          key: deriveddata-${{ steps.get-date.outputs.week }}-${{ steps.get-date.outputs.date }}-${{ steps.get-date.outputs.hour }}-${{ steps.get-date.outputs.minute }}
          restore-keys: |
            deriveddata-${{ steps.get-date.outputs.week }}-${{ steps.get-date.outputs.date }}-${{ steps.get-date.outputs.hour }}
            deriveddata-${{ steps.get-date.outputs.week }}-${{ steps.get-date.outputs.date }}
            deriveddata-${{ steps.get-date.outputs.week }}
            deriveddata
      - uses: actions/cache@v3
        name: Pods cache
        with:
          path: |
            .pods-cache
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ios-pods-${{ hashFiles('ios/Podfile.lock') }}-v2
          restore-keys: |
            ios-pods-
      # Manually extract the derived data using tar so we can preserve permissions & extended file flags, which xcode
      # relies on
      - name: Extract data from cache
        run: |
          if [ -f .deriveddata-cache/cache.tar ]; then tar xvPpf .deriveddata-cache/cache.tar; else echo "No deriveddata cache file"; fi
          if [ -f .pods-cache/cache.tar ]; then tar xvPpf .pods-cache/cache.tar; else echo "No pods cache file"; fi
      # Set the "modified time" of every file in the repository to be the time it was most recently modified in git -- this means that xcode
      # can reliably use the `mtime` to see which files have changed. By default it's set to the time you check out.
      - name: Update file mtimes
        run: |
          set +e
          git submodule foreach 'rev=HEAD; for f in $(git ls-tree -r -t --full-name --name-only "$rev") ; do     touch -t $(git log --pretty=format:%cd --date=format:%Y%m%d%H%M.%S -1 "$rev" -- "$f") "$f"; done'
          rev=HEAD; for f in $(git ls-tree -r -t --full-name --name-only "$rev") ; do     touch -t $(git log --pretty=format:%cd --date=format:%Y%m%d%H%M.%S -1 "$rev" -- "$f") "$f"; done
      # Configure ruby according to our .ruby-version
      - name: Setup ruby & Bundler
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      # Set up flutter (feel free to adjust the version below)
      - name: Setup flutter
        uses: subosito/flutter-action@v2
        with:
          cache: true
          channel: "stable"

      # Start ssh-agent but set it to use the same ssh_auth_sock value.
      # The agent will be running in all steps after this, so it
      # should be one of the first.
      - name: Setup SSH passphrase
        env:
          SSH_PASSPHRASE: ${{secrets.MATCH_PASSWORD}}
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          echo 'echo $SSH_PASSPHRASE' > ~/.ssh_askpass && chmod +x ~/.ssh_askpass
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | DISPLAY=None SSH_ASKPASS=~/.ssh_askpass ssh-add - >/dev/null

      - name: Download dependencies
        run: flutter pub get
      - name: Build & Publish to TestFlight with Fastlane
        env:
          APP_STORE_CONNECT_API_KEY_KEY: ${{secrets.APP_STORE_CONNECT_API_KEY_KEY }}
          MATCH_PASSWORD: ${{secrets.MATCH_PASSWORD}}
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: cd ios && bundle exec fastlane beta "build_name:${{ github.ref_name }}"
      # Package up the derived data for the caching action, including permissions and fine grained timestamps
      - name: Package DerivedData for cache
        run: |
          mkdir -p .deriveddata-cache .pods-cache
          tar cfPp .deriveddata-cache/cache.tar --format posix build/ios/localDerivedData
          if [[ -d "ios/Pods" ]]; then
            find build/ios
            tar cfPp .pods-cache/cache.tar --format posix ios/Pods build/ios/pod_inputs.fingerprint
          else
            rm -f .pods-cache/cache.tar
          fi
